def rotate_byte(byte, shift):
    shift = shift % 8  # Ensure the shift is within the range of 0-7
    return ((byte << shift) & 0xFF) | (byte >> (8 - shift))

def xor_strings(plaintext, ciphertext, shift_i):
    
    # Determine the length of the shorter string
    length = min(len(plaintext), len(ciphertext))
    
    # Initialize the result byte array
    result = bytearray(length)
    
    # Perform byte-by-byte rotation and XOR
    for i in range(length):
        rotated_byte = rotate_byte(plaintext[i], shift_i)  # Rotate byte i positions
        result[i] = rotated_byte ^ ciphertext[i]      # XOR with corresponding byte from the second string
    
    return result

infile = open("plaintext.txt.gz.enc", "rb")
data = infile.read()
infile.close()

plaintext = b"plaintext.txt"
ciphertext = data[10:10 + len(plaintext)]
print(repr(ciphertext))

for j in range(8):
    res = xor_strings(plaintext, ciphertext, j)
    print(repr(res))