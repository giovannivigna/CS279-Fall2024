import pwn
import datetime
import base64
import random
import sys

# Remote host information
remote_host = sys.argv[1]
remote_port = int(sys.argv[2])

start_marker = "---- Start of Message ----"
end_marker = "---- End of Message ----"

# Connect to the remote host
conn = pwn.remote(remote_host, remote_port)

# Receive the welcome message (you may need to customize this based on the format)
welcome_message = ""
while True:
	chunk = conn.recv().decode()
	welcome_message += chunk
	if end_marker in welcome_message:
	    break

print(f"Received: {welcome_message}")

# Extract the date from the welcome message (you may need to customize the parsing)
date_string = welcome_message[len("Oncetimepad service started at "):len("Oncetimepad service started at ")+len("Tue, 17 Oct 2023 01:06")]

print(f"Date string: {date_string}")

# Find the start and end markers in the welcome message
start_index = welcome_message.find(start_marker)
end_index = welcome_message.find(end_marker)

message_string = welcome_message[start_index + len(start_marker):end_index].strip()

print(f"Message string: {message_string}")

dt = datetime.datetime.strptime(date_string, "%a, %d %b %Y %H:%M")
seed = int(dt.strftime("%s"))
print(f"Seed: {seed}")
encrypted_data = base64.b64decode(message_string)
print(f"Data: {repr(encrypted_data)}")
	
encrypted_bytes = bytearray(encrypted_data)

found = False
for h in range (-24, 25):	
    for s in range(60):
        encryption_bytes = bytearray(encrypted_data)
        decrypted_bytes = bytearray(encrypted_data)

        random.seed(seed + h*3600 + s)
        for i in range(len(encrypted_bytes)):
            encryption_bytes[i] = random.randint(0, 255)
            decrypted_bytes[i] = encrypted_bytes[i] ^ encryption_bytes[i]

        data = "".join(chr(val) for val in decrypted_bytes)
        found = True
        for c in data:
            if ord(c) > 128:
                found = False
                break
        if found:
            print(f"Found data with seed hour {h} and seconds {s}: [{data}]")
            response = str(data)
            break
    if found:
         break
    
print(f"Sending back: {response}")
conn.sendline(response)	
output = conn.recvall()
print(output)
# Close the connection
conn.close()